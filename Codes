****************JavaScript Program To Print Hello World************

We will use these three ways to print 'Hello, World!'.

    console.log()
    alert()
    document.write()


1. Using console.log()

console.log() is used in debugging the code.

Source Code

// the hello world program
console.log('Hello World');

2. Using alert()

The alert() method displays an alert box over the current window with the specified message.

Source Code

// the hello world program
alert("Hello, World!");

3. Using document.write()

document.write() is used when you want to print the content to the HTML document.

Source Code

// the hello world program
document.write('Hello, World!');









**********JavaScript Program to Add Two Numbers**********

We use the + operator to add two or more numbers.

Example 1: Add Two Numbers

const num1 = 5;
const num2 = 3;

// add two numbers
const sum = num1 + num2;

// display the sum
console.log('The sum of ' + num1 + ' and ' + num2 + ' is: ' + sum);

Output

The sum of 5 and 3 is: 8

Example 2: Add Two Numbers Entered by the User

// store input numbers
const num1 = parseInt(prompt('Enter the first number '));
const num2 = parseInt(prompt('Enter the second number '));

//add two numbers
const sum = num1 + num2;

// display the sum
console.log(`The sum of ${num1} and ${num2} is ${sum}`);

Output

Enter the first number 5
Enter the second number 3
The sum of 5 and 3 is: 8

The above program asks the user to enter two numbers. Here, prompt() is used to take inputs from the user. 
parseInt() is used to convert the user input string to number.

const num1 = parseInt(prompt('Enter the first number '));
const num2 = parseInt(prompt('Enter the second number '));

Then, the sum of the numbers is computed.

const sum = num1 + num2;

Finally, the sum is displayed. To display the result, we have used the template literal ` `. 
This allows us to include variables inside strings.

console.log(`The sum of ${num1} and ${num2} is ${sum}`);

To include variables inside ``, you need to use the ${variable} format.

Note: Template literals was introduced in ES6 and some browsers may not support them.









**********JavaScript Program to Find the Square Root**********

To find the square root of a number in JavaScript, you can use the built-in Math.sqrt() method. 

Its syntax is: Math.sqrt(number);

Here, the Math.sqrt() method takes a number and returns its square root.

Example 1: Square Root of a Number

// take the input from the user
const number = prompt('Enter the number: ');

const result = Math.sqrt(number);
console.log(`The square root of ${number} is ${result}`);

Output

Enter the number: 9 
The square root of 9 is 3

Example 2: Square Root of Different Data Types

const number1 = 2.25;
const number2 = -4;
const number3 = 'hello';

const result1 = Math.sqrt(number1);
const result2 = Math.sqrt(number2);
const result3 = Math.sqrt(number3);

console.log(`The square root of ${number1} is ${result1}`);
console.log(`The square root of ${number2} is ${result2}`);
console.log(`The square root of ${number3} is ${result3}`);

Output

The square root of 2.25 is 1.5
The square root of -4 is NaN
The square root of hello is NaN

    -> If 0 or a positive number is passed in the Math.sqrt() method, then the square root of that number is returned.
    -> If a negative number is passed, NaN is returned.
    -> If a string is passed, NaN is returned.
    
    







**********JavaScript Program to Calculate the Area of a Triangle**********

If you know the base and height of a triangle, you can find the area using the formula:

area = (base * height) / 2

Example 1: Area When Base and Height is Known

const baseValue = prompt('Enter the base of a triangle: ');
const heightValue = prompt('Enter the height of a triangle: ');

// calculate the area
const areaValue = (baseValue * heightValue) / 2;

console.log(`The area of the triangle is ${areaValue}`);

Output

Enter the base of a triangle: 4
Enter the height of a triangle: 6
The area of the triangle is 12


If you know all the sides of a triangle, you can find the area using Herons' formula. If a, b and c are the three sides of a triangle, then

s = (a+b+c)/2
area = √(s(s-a)*(s-b)*(s-c))

Example 2: Area When All Sides are Known

const side1 = parseInt(prompt('Enter side1: '));
const side2 = parseInt(prompt('Enter side2: '));
const side3 = parseInt(prompt('Enter side3: '));

// calculate the semi-perimeter
const s = (side1 + side2 + side3) / 2;

//calculate the area
const areaValue = Math.sqrt(s * (s - side1) * (s - side2) * (s - side3));

console.log(`The area of the triangle is ${areaValue}`);

Output

Enter side1: 3
Enter side2: 4
Enter side3: 5
The area of the triangle is 6

Here, we have used the Math.sqrt() method to find the square root of a number.

Note: If a triangle cannot be formed from the given sides, the program will not run correctly.









**********JavaScript Program to Swap Two Variables**********

Example 1: Using a Temporary Variable

//JavaScript program to swap two variables

//take input from the users
let a = prompt('Enter the first variable: ');
let b = prompt('Enter the second variable: ');

//create a temporary variable
let temp;

//swap variables
temp = a;
a = b;
b = temp;

console.log(`The value of a after swapping: ${a}`);
console.log(`The value of b after swapping: ${b}`);

Output

Enter the first variable: 4
Enter the second variable: 2
The value of a after swapping: 2
The value of b after swapping: 4

Here,

    We created a temp variable to store the value of a temporarily.
    We assigned the value of b to a.
    The value of temp is assigned to b

As a result, the value of the variables are swapped.

Note: You can also swap strings or other data types using this method.


Example 2: Using es6(ES2015) Destructuring assignment

//JavaScript program to swap two variables

//take input from the users
let a = prompt('Enter the first variable: ');
let b = prompt('Enter the second variable: ');

//using destructuring assignment
[a, b] = [b, a];

console.log(`The value of a after swapping: ${a}`);
console.log(`The value of b after swapping: ${b}`);

Output

Enter the first variable: 4
Enter the second variable: 2
The value of a after swapping: 2
The value of b after swapping: 4

Here, a new es6 feature, called destructuring assignment [a, b] = [b, a], is used to swap the value of two variables. 
If [a, b] = [1, 2, 3], the value of a will be 1 and value of b will be 2.

    First a temporary array [b, a] is created. Here the value of [b, a] will be [2, 4].
    The destructuring of the array is done, i.e [a, b] = [2, 4].

As a result, the value of the variables are swapped.

Note: You can also swap strings or other data types using this method.

You can also swap the variable's values using the arithmetic operators.


Example 3: Using Arithmetic Operators

//take input from the users
let a = parseInt(prompt('Enter the first variable: '));
let b = parseInt(prompt('Enter the second variable: '));

// addition and subtraction operator
a = a + b;
b = a - b;
a = a - b;

console.log(`The value of a after swapping: ${a}`);
console.log(`The value of b after swapping: ${b}`);

Output

Enter the first variable: 4
Enter the second variable: 2
The value of a after swapping: 2
The value of b after swapping: 4

This method only uses the two variables and swaps the value of the variables using arithmetic operators + and -.

Here, parseInt() is used because prompt() takes input from the user as a string. And when numeric strings are added, it behaves as a string. For example, '2' + '3' = '23'. So parseInt() converts a numeric string to number.

Let's see how the above program swaps values. Initially, a is 4 and b is 2.

    a = a + b assigns the value 4 + 2 to a (now 6).
    b = a - b assigns the value 6 - 2 to b (now 4).
    a = a - b assign the value 6 - 4 to a (now 2).

Finally, a is 2 and b is 4.

Note: You can use arithmetic operators (+, -) if both variables are of number type.

Example 4: Using Bitwise XOR operator

//take input from the users
let a = prompt('Enter the first variable: ');
let b = prompt('Enter the second variable: ');

// XOR operator
a = a ^ b
b = a ^ b
a = a ^ b

console.log(`The value of a after swapping: ${a}`);
console.log(`The value of b after swapping: ${b}`);

Output

Enter the first variable: 4
Enter the second variable: 2
The value of a after swapping: 2
The value of b after swapping: 4

Let's see how the above program swaps values. Initially, a is 4 and b is 2.

    a = a ^ b assigns the value 4 ^ 2 to a (now 6).
    b = a ^ b assigns the value 6 ^ 2 to b (now 4).
    a = a ^ b assign the value 6 ^ 4 to a (now 2).

Finally, a is 2 and b is 4.

Note: You can use this method for only integer (whole number) values.









**********Javascript Program to Solve Quadratic Equation**********

This program computes roots of a quadratic equation when its coefficients are known.

The standard form of a quadratic equation is:

ax2 + bx + c = 0, where
a, b and c are real numbers and
a ≠ 0

To find the roots of such equation, we use the formula,

(root1,root2) = (-b ± √b2-4ac)/2

The term b2-4ac is known as the discriminant of a quadratic equation. It tells the nature of the roots.

   -> If the discriminant is greater than 0, the roots are real and different.
   -> If the discriminant is equal to 0, the roots are real and equal.
   -> If the discriminant is less than 0, the roots are complex and different.

Example: Roots of a Quadratic Equation

let root1, root2;

// take input from the user
let a = prompt("Enter the first number: ");
let b = prompt("Enter the second number: ");
let c = prompt("Enter the third number: ");

// calculate discriminant
let discriminant = b * b - 4 * a * c;

// condition for real and different roots
if (discriminant > 0) {
    root1 = (-b + Math.sqrt(discriminant)) / (2 * a);
    root2 = (-b - Math.sqrt(discriminant)) / (2 * a);

    // result
    console.log(`The roots of quadratic equation are ${root1} and ${root2}`);
}

// condition for real and equal roots
else if (discriminant == 0) {
    root1 = root2 = -b / (2 * a);

    // result
    console.log(`The roots of quadratic equation are ${root1} and ${root2}`);
}

// if roots are not real
else {
    let realPart = (-b / (2 * a)).toFixed(2);
    let imagPart = (Math.sqrt(-discriminant) / (2 * a)).toFixed(2);

    // result
    console.log(
    `The roots of quadratic equation are ${realPart} + ${imagPart}i and ${realPart} - ${imagPart}i`
  );
}

Output 1

Enter the first number: 1
Enter the second number: 6
Enter the third number: 5
The roots of quadratic equation are -1 and -5

The above input values satisfy the first if condition. Here, the discriminant will be greater than 0 and the corresponding code is executed.

Output 2

Enter the first number: 1
Enter the second number: -6
Enter the third number: 9
The roots of quadratic equation are 3 and 3

The above input values satisfy the else if condition. Here, the discriminant will be equal to 0 and the corresponding code is executed.

Output 3

Enter the first number: 1
Enter the second number: -3
Enter the third number: 10
The roots of quadratic equation are 1.50 + 2.78i and 1.50 - 2.78i

In the above output, the discriminant will be less than 0 and the corresponding code is executed.

In the above program, the Math.sqrt() method is used to find the square root of a number. 
You can see that toFixed(2) is also used in the program. This rounds up the decimal number to two decimal values.









**********JavaScript Program to Convert Kilometers to Miles**********

We know that 1 kilometer is equal to 0.621371 miles.

So to convert kilometers to miles, you can use the formula:

miles = kilometers * 0.621371

Example 1: Kilometers to Miles

// taking kilometers input from the user
const kilometers = prompt("Enter value in kilometers: ")

// conversion factor
const factor = 0.621371

// calculate miles
const miles = kilometers * factor

console.log(`${kilometers} kilometers is equal to ${miles} miles.`);

Output

Enter value in kilometers: 2.2
2.2 kilometers is equal to 1.3670162000000001 miles.

Here, the kilometers variable is used to store the kilometer value from the user. 
Then kilometer value is multiplied with factor to convert into miles.

To convert miles to kilometers, you can use formula:

kilometers = miles / factor









**********Javascript Program to Convert Celsius to Fahrenheit**********

You can convert the celsius value to fahrenheit by using the formula:

fahrenheit = celsius * 1.8 + 32

Example: Celsius to Fahrenheit

// program to convert celsius to fahrenheit
// ask the celsius value to the user 
const celsius = prompt("Enter a celsius value: ");

// calculate fahrenheit
const fahrenheit = (celsius * 1.8) + 32

// display the result
console.log(`${celsius} degree celsius is equal to ${fahrenheit} degree fahrenheit.`);

Output

Enter a celsius value: 55
55 degree celsius is equal to 131 degree fahrenheit.

In the above program, the user enters the celsius value and is stored in the celsius variable. 
Then the fahrenheit formula is used to convert celsius value to fahrenheit.

You can convert fahrenheit value to celsius using the formula:

celsius = (fahrenheit - 32) / 1.8









**********Javascript Program to Generate a Random Number**********

In JavaScript, you can generate a random number with the Math.random() function.

Math.random() returns a random floating-point number ranging from 0 to less than 1 (inclusive of 0 and exclusive of 1).

Example 1: Generate a Random Number

// generating  a random number
const a = Math.random();
console.log(a);

Output

0.5856407221615856

Here, we have declared a variable a and assigned it a random number greater than or equal to 0 and less than 1.

Note: You might get a different output in the above program as Math.random() will generate a random number.

We can use this value in the range (0,1) to find the random value between any two numbers using formula:

Math.random() * (highestNumber - lowestNumber) + lowestNumber

Example 2: Get a Random Number between 1 and 10

// generating a random number
const a = Math.random() * (10-1) + 1
console.log(`Random value between 1 and 10 is ${a}`);

Output

Random value between 1 and 10 is 7.392579122270686

This will show a random floating-point number greater than 1 and less than 10.

All the above examples give floating-point random numbers.

You can use Math.floor() to get a random integer value. Math.floor() returns the number by decreasing the value to the nearest integer value. For example,

Math.floor(5.389); // 5
Math.floor(5.9); // 5

The syntax to find the random integer value between two numbers:

Math.floor(Math.random() * (highestNumber - lowestNumber)) + lowestNumber

Example 3: Integer Value between 1 and 10

// generating a random number
const a = Math.floor(Math.random() * (10 - 1)) + 1;
console.log(`Random value between 1 and 10 is ${a}`);

Output

Random value between 1 and 10 is 2

This will show integer output between 1 (inclusive) to 10 (exclusive), i.e. (1 to 9). Here, Math.floor() is used to convert decimal to integer value.

Similarly, if you want to find the random integer in between min (inclusive) to max (inclusive), you can use the following formula:

Math.floor(Math.random() * (max - min + 1)) + min

Example 4: Integer Value between Two Numbers (Inclusive)

// input from the user
const min = parseInt(prompt("Enter a min value: "));
const max = parseInt(prompt("Enter a max value: "));

// generating a random number
const a = Math.floor(Math.random() * (max - min + 1)) + min;

// display a random number
console.log(`Random value between ${min} and ${max} is ${a}`);

Output

Enter a min value: 1
Enter a max value: 50
Random value between 1 and 50 is 47

This will show the integer output between min (inclusive) to max (inclusive).









Javascript Program to Check if a number is Positive, Negative, or Zero



You will be using the if...else if...else statement to write the program.
Example 1: Check Number Type with if...else if...else

// program that checks if the number is positive, negative or zero
// input from the user
const number = parseInt(prompt("Enter a number: "));

// check if number is greater than 0
if (number > 0) {
    console.log("The number is positive");
}

// check if number is 0
else if (number == 0) {
  console.log("The number is zero");
}

// if number is less than 0
else {
     console.log("The number is negative");
}

Run Code

Output

Enter a number: 0
The number is zero.

The above program checks if the number entered by the user is positive, negative or zero.

    The condition number > 0 checks if the number is positive.
    The condition number == 0 checks if the number is zero.
    The condition number < 0 checks if the number is negative.

The above program can also be written using the nested if...else statement.
Example 2: Check Number Type with nested if...else

// check if the number is positive, negative or zero
const number = prompt("Enter a number: ");

if (number >= 0) {
    if (number == 0) {
        console.log("The number is zero");
    } else {
        console.log("The number is positive");
    }
} else {
    console.log("The number is negative");
}

Run Code

Output

Enter a number: 0
You entered number zero

The above program works the same as Example 1. However, the second example uses the nested if...else statement.


Javascript Program to Check if a Number is Odd or Even



Even numbers are those numbers that are exactly divisible by 2.

The remainder operator % gives the remainder when used with a number. For example,

const number = 6;
const result = number % 4; // 2 

Hence, when % is used with 2, the number is even if the remainder is zero. Otherwise, the number is odd.
Example 1: Using if...else

// program to check if the number is even or odd
// take input from the user
const number = prompt("Enter a number: ");

//check if the number is even
if(number % 2 == 0) {
    console.log("The number is even.");
}

// if the number is odd
else {
    console.log("The number is odd.");
}

Run Code

Output

Enter a number: 27
The number is odd.

In the above program, number % 2 == 0 checks whether the number is even. If the remainder is 0, the number is even.

In this case, 27 % 2 equals to 1. Hence, the number is odd.

The above program can also be written using a ternary operator.
Example 2: Using Ternary Operator

// program to check if the number is even or odd
// take input from the user
const number = prompt("Enter a number: ");

// ternary operator
const result = (number % 2  == 0) ? "even" : "odd";

// display the result
console.log(`The number is ${result}.`);

Run Code

Output

Enter a number: 5
The number is odd.

JavaScript Program to Find the Largest Among Three Numbers



You can find the largest among three numbers using the if...else statement.
Example 1: Largest Number Among Three Numbers

// program to find the largest among three numbers

// take input from the user
const num1 = parseFloat(prompt("Enter first number: "));
const num2 = parseFloat(prompt("Enter second number: "));
const num3 = parseFloat(prompt("Enter third number: "));
let largest;

// check the condition
if(num1 >= num2 && num1 >= num3) {
    largest = num1;
}
else if (num2 >= num1 && num2 >= num3) {
    largest = num2;
}
else {
    largest = num3;
}

// display the result
console.log("The largest number is " + largest);

Run Code

Output

Enter first number: -7
Enter second number: -5
Enter third number: -1
The largest number is -1

In the above program, parseFloat() is used to convert numeric string to number. If the string is a floating number, parseFloat() converts the string into floating point number.

The numbers are compared with one another using greater than or equal to >= operator. And the if...else if...else statement is used to check the condition.

Here, logical AND && is also used to check two conditions.

You can also use the JavaScript built-in Math.max() function to find the largest among the numbers.
Example2: Using Math.max()

// program to find the largest among three numbers

// take input from the user
const num1 = parseFloat(prompt("Enter first number: "));
const num2 = parseFloat(prompt("Enter second number: "));
const num3 = parseFloat(prompt("Enter third number: "));

const largest = Math.max(num1, num2, num3);

// display the result
console.log("The largest number is " + largest);

Run Code

Output

Enter first number: 5
Enter second number: 5.5
Enter third number: 5.6
The largest number is 5.6

Math.max() returns the largest number among the provided numbers.

You can use Math.min() function to find the smallest among the numbers.

JavaScript Program to Check Prime Number



A prime number is a positive integer that is only divisible by 1 and itself. For example, 2, 3, 5, 7, 11 are the first few prime numbers.
Example: Check Prime Number

// program to check if a number is prime or not

// take input from the user
const number = parseInt(prompt("Enter a positive number: "));
let isPrime = true;

// check if number is equal to 1
if (number === 1) {
    console.log("1 is neither prime nor composite number.");
}

// check if number is greater than 1
else if (number > 1) {

    // looping through 2 to number-1
    for (let i = 2; i < number; i++) {
        if (number % i == 0) {
            isPrime = false;
            break;
        }
    }

    if (isPrime) {
        console.log(`${number} is a prime number`);
    } else {
        console.log(`${number} is a not prime number`);
    }
}

// check if number is less than 1
else {
    console.log("The number is not a prime number.");
}

Run Code

Output

Enter a positive number: 23
23 is a prime number.

In the above program, the user is prompted to enter a number. The number entered by the user is checked if it is greater than 1 using if...else if... else statement.

    1 is considered neither prime nor composite.
    All negative numbers are excluded because prime numbers are positive.
    Numbers greater than 1 are tested using a for loop.

The for loop is used to iterate through the positive numbers to check if the number entered by the user is divisible by positive numbers (2 to user-entered number minus 1).

The condition number % i == 0 checks if the number is divisible by numbers other than 1 and itself.

    If the remainder value is evaluated to 0, that number is not a prime number.
    The isPrime variable is used to store a boolean value: either true or false.
    The isPrime variable is set to false if the number is not a prime number.
    The isPrime variable remains true if the number is a prime number.

JavaScript Program to Print All Prime Numbers in an Interval



A prime number is a positive integer that is only divisible by 1 and itself. For example, 2, 3, 5, 7, 11 are the first few prime numbers.

For example, 4 is not a prime number because it is divisible by 1, 2 and 4 itself. It is a composite number.
Example: Print Prime Numbers

// program to print prime numbers between the two numbers

// take input from the user
const lowerNumber = parseInt(prompt('Enter lower number: '));
const higherNumber = parseInt(prompt('Enter higher number: '));

console.log(`The prime numbers between ${lowerNumber} and ${higherNumber} are:`);

// looping from lowerNumber to higherNumber
for (let i = lowerNumber; i <= higherNumber; i++) {
    let flag = 0;

    // looping through 2 to user input number
    for (let j = 2; j < i; j++) {
        if (i % j == 0) {
            flag = 1;
            break;
        }
    }

    // if number greater than 1 and not divisible by other numbers
    if (i > 1 && flag == 0) {
        console.log(i);
    }
}

Run Code

Output

Enter lower number: 2
Enter higher number : 10
The prime numbers between 2 and 10 are:
2
3
5
7

In the above program, the user is prompted to enter lower and higher bound numbers. Then the prime number between those numbers (including the lower and higher bounds, if any) are listed out.

Two nested for loops are used in the above program.

    The first for loop is used to loop between the numbers provided by the user. In this case, from 2 to 10.
    A variable flag is set to 0.
    The second for loop is used to loop between 2 to the number that is stored in i.
    Inside the second loop, the value of i is divided by each number from 2 to value one less than i (i - 1).
    While dividing, if any number remainder results in 0, that number is not a prime number. So the variable flag is set to 1.
    Finally, all the numbers that have a flag 0 (not divisible by other numbers) are printed.


JavaScript Program to Find the Factorial of a Number

The factorial of a number is the product of all the numbers from 1 to that number. For example,

factorial of 5 is equal to 1 * 2 * 3 * 4 * 5 = 120.

The factorial of a positive number n is given by:

factorial of n (n!) = 1 * 2 * 3 * 4.....n

The factorial of negative numbers do not exist and the factorial of 0 is 1.

Example: Find Factorial

// program to find the factorial of a number

// take input from the user
const number = parseInt(prompt('Enter a positive integer: '));

// checking if number is negative
if (number < 0) {
    console.log('Error! Factorial for negative number does not exist.');
}

// if number is 0
else if (number === 0) {
    console.log(`The factorial of ${number} is 1.`);
}

// if number is positive
else {
    let fact = 1;
    for (i = 1; i <= number; i++) {
        fact *= i;
    }
    console.log(`The factorial of ${number} is ${fact}.`);
}

Run Code

Output

Enter a positive integer: 5
The factorial of 5 is 120.

In the above program, the user is prompted to enter an integer. Then if...else if...else statement is used to check the condition of a number.

    When the user enters a negative number, an error message is shown.
    When the user enters 0, the factorial is 1.
    When the user enters a positive integer, a for loop is used to iterate over 1 to the number entered by the user to find the factorial.
    Each number is multiplied and stored in the fact variable.

JavaScript Program to Display the Multiplication Table


Example 1: Multiplication Table Up to 10

// program to generate a multiplication table

// take input from the user
const number = parseInt(prompt('Enter an integer: '));

//creating a multiplication table
for(let i = 1; i <= 10; i++) {

    // multiply i with number
    const result = i * number;

    // display the result
    console.log(`${number} * ${i} = ${result}`);
}

Run Code

Output

Enter an integer: 3
3 * 1 = 3
3 * 2 = 6
3 * 3 = 9
3 * 4 = 12
3 * 5 = 15
3 * 6 = 18
3 * 7 = 21
3 * 8 = 24
3 * 9 = 27
3 * 10 = 30

In the above program, the user is prompted to enter an integer value. Then, the for loop is used to iterate through 1 to 10 to create a multiplication table.
Example 2: Multiplication Table Up to a Range

/* program to generate a multiplication table
upto a range */

// take number input from the user
const number = parseInt(prompt('Enter an integer: '));

// take range input from the user
const range = parseInt(prompt('Enter a range: '));

//creating a multiplication table
for(let i = 1; i <= range; i++) {
    const result = i * number;
    console.log(`${number} * ${i} = ${result}`);
}

Run Code

Output

Enter an integer: 7
Enter a range: 5
7 * 1 = 7
7 * 2 = 14
7 * 3 = 21
7 * 4 = 28
7 * 5 = 35

In the above example, the user is prompted to enter an integer and also a range for which they want to create a multiplication table.

The user enters an integer (here 7) and a range (here 5). Then a multiplication table is created using a for loop for that range.


JavaScript Program to Print the Fibonacci Sequence

A fibonacci sequence is written as:

0, 1, 1, 2, 3, 5, 8, 13, 21, ...

The Fibonacci sequence is the integer sequence where the first two terms are 0 and 1. After that, the next term is defined as the sum of the previous two terms.

Example 1: Fibonacci Series Up to n Terms

// program to generate fibonacci series up to n terms

// take input from the user
const number = parseInt(prompt('Enter the number of terms: '));
let n1 = 0, n2 = 1, nextTerm;

console.log('Fibonacci Series:');

for (let i = 1; i <= number; i++) {
    console.log(n1);
    nextTerm = n1 + n2;
    n1 = n2;
    n2 = nextTerm;
}

Run Code

Output

Enter the number of terms: 4
Fibonacci Series:
0
1
1
2

In the above program, the user is prompted to enter the numbers of terms that they want in the Fibonacci series.

The for loop iterates up to the number entered by the user.

0 is printed at first. Then, in each iteration, the value of the second term is stored in variable n1 and the sum of two previous terms is stored in variable n2.
Example 2: Fibonacci Sequence Up to a Certain Number

// program to generate fibonacci series up to a certain number

// take input from the user
const number = parseInt(prompt('Enter a positive number: '));
let n1 = 0, n2 = 1, nextTerm;

console.log('Fibonacci Series:');
console.log(n1); // print 0
console.log(n2); // print 1

nextTerm = n1 + n2;

while (nextTerm <= number) {

    // print the next term
    console.log(nextTerm);

    n1 = n2;
    n2 = nextTerm;
    nextTerm = n1 + n2;
}

Run Code

Output

Enter a positive number: 5
Fibonacci Series:
0
1
1
2
3
5

In the above example, the user is prompted to enter a number up to which they want to print the Fibonacci series.

The first two terms 0 and 1 are displayed beforehand. Then, a while loop is used to iterate over the terms to find the Fibonacci series up to the number entered by the user.









JavaScript Program to Check Armstrong Number

A positive integer is called an Armstrong number (of order n) if

abcd... = an + bn + cn + dn + ...

In the case of an Armstrong number of 3 digits, the sum of cubes of each digit is equal to the number itself. For example, 153 is an Armstrong number because

153 = 1*1*1 + 5*5*5 + 3*3*3

Similarly, 1634 is an Armstrong number because:

1634 = 1*1*1*1 + 6*6*6*6* + 3*3*3*3 + 4*4*4*4

Example 1: Check Armstrong Number of Three Digits

// program to check an Armstrong number of three digits

let sum = 0;
const number = prompt('Enter a three-digit positive integer: ');

// create a temporary variable
let temp = number;
while (temp > 0) {
    // finding the one's digit
    let remainder = temp % 10;

    sum += remainder * remainder * remainder;

    // removing last digit from the number
    temp = parseInt(temp / 10); // convert float into integer
}
// check the condition
if (sum == number) {
    console.log(`${number} is an Armstrong number`);
}
else {
    console.log(`${number} is not an Armstrong number.`);
}

Run Code

Output

Enter a three-digit positive integer: 153
153 is an Armstrong number.

The above program takes an input from the user. Then,

    The number entered by the user is stored in a temporary variable temp.
    A while loop is used to iterate a three-digit value.
        The modulus operator % is used to obtain each digit number. When a number is divided by 10, the remainder is the last digit. In the first iteration, 153 % 10 gives 3.
        The remainder digit's cube is calculated by multiplying the digit three times. And the cube is added to the sum variable.
        The digit is divided by 10 to remove the last digit.
        The while loop continues iterating and dividing the number by 10 until the number is 0.
    Finally, the sum is compared with the number entered by the user. If the sum and the number are equal, the number is an Armstrong number.

Note: In the above program, the cube of a number could be calculated using an exponent operator **. For example, sum += remainder ** 3;
Example 2: Check Armstrong Number of n Digits

// program to check an Armstrong number of n digits

// take an input
const number = prompt("Enter a positive integer");
const numberOfDigits = number.length;
let sum = 0;

// create a temporary variable
let temp = number;

while (temp > 0) {

    let remainder = temp % 10;

    sum += remainder ** numberOfDigits;

    // removing last digit from the number
    temp = parseInt(temp / 10); // convert float into integer
}

if (sum == number) {
    console.log(`${number} is an Armstrong number`);
}
else {
    console.log(`${number} is not an Armstrong number.`);
}

Run Code

Output

Enter a positive integer: 92727
92727 is an Armstrong number

In the above program, an Armstrong number of n digits is checked.

When the user enters a number, it is taken as a string. The length property returns the length of a string.

The number entered by the user is stored in a temp variable. And a while loop is used to iterate until its value is less than 0. Each digit of the number is raised to the power of the length of the number.


JavaScript Program to Find Armstrong Number in an Interval

A positive integer is called an Armstrong number (of order n) if:

abcd... = an + bn + cn + dn + ...

In the case of an Armstrong number of 3 digits, the sum of cubes of each digit is equal to the number itself. For example, 153 is an Armstrong number because:

153 = 1*1*1 + 5*5*5 + 3*3*3

Similarly, 1634 is an Armstrong number because:

1634 = 1*1*1*1 + 6*6*6*6* + 3*3*3*3 + 4*4*4*4

Example: Armstrong Numbers Between Two Intervals

// program to find Armstrong number between intervals

// take an input
const lowNumber = parseInt(prompt('Enter a positive low integer value: '));
const highNumber = parseInt(prompt('Enter a positive high integer value: '));

console.log ('Armstrong Numbers:');

// looping through lowNumber to highNumber
for (let i = lowNumber; i <= highNumber; i++) {

    // converting number to string 
    let numberOfDigits = i.toString().length;

    let sum = 0;

    // create a temporary variable
    let temp = i;

    /* loop through a number to find if 
    a number is an Armstrong number */
    while (temp > 0) {

        let remainder = temp % 10;
        sum += remainder ** numberOfDigits;
        // removing last digit from the number
        temp = parseInt(temp / 10); // convert float into integer
    }
 
    if (sum == i) {
        console.log(i);
    }
}

Run Code

Output

Enter a positive low integer value: 8
Enter a positive high integer value: 500
Armstrong Numbers: 
8
9
153
370
371
407

In the above program, the user is prompted to enter two integers. One is the lower interval integer and another is the higher integer value.

The parseInt() converts the numeric string value to an integer value.

The for loop is used to loop through the two numbers provided by the user.

The toString() method is used to convert the number to a string. And the length property is used to find the length of a string. Hence, in this case, length gives the total digits in the number.

let numberOfDigits = i.toString().length;

In the first for loop iteration (i = 8),

    The lower number entered by the user is stored in a temporary variable temp.
    A while loop is used to iterate the number.
        The modulus operator % is used to obtain each digit number. When a number is divided by 10, the remainder is the last digit. In the first iteration, 8 % 10 gives 8.
        The remainder is multiplied by the number of digits in that number (here 1) and the sum is calculated.
        The digit is divided by 10 to remove the last digit, i.e. 8 / 10 gives 0.
    Finally, the sum is compared with the number entered by the user. If the sum and the number are equal, the Armstrong number is displayed.

The loop continues for all the numbers that are in between the lower and upper bounds provided by the user. In the above example, the loop is executed from 8 to 500.



JavaScript Program to Make a Simple Calculator


Example 1: Simple Calculator with if..else if...else

// program for a simple calculator

// take the operator input
const operator = prompt('Enter operator ( either +, -, * or / ): ');

// take the operand input
const number1 = parseFloat(prompt('Enter first number: '));
const number2 = parseFloat(prompt('Enter second number: '));

let result;

// using if...else if... else
if (operator == '+') {
    result = number1 + number2;
}
else if (operator == '-') {
    result = number1 - number2;
}
else if (operator == '*') {
    result = number1 * number2;
}
else {
    result = number1 / number2;
}

// display the result
console.log(`${number1} ${operator} ${number2} = ${result}`);

Run Code

Output

Enter operator ( either +, -, * or / ): *
Enter first number: 3.4
Enter second number: 5.6
3.4 * 5.6 = 19.04

In the above example, the user is prompted to enter an operator (either +, -, * or /) and two numbers.

The parseFloat() converts the numeric string value to a floating-point value.

The if...else if...if statement is used to check the condition that the user has entered for the operator. The corresponding operation is performed and the output is displayed.
Example 2: Simple Calculator with switch

// program for a simple calculator
let result;

// take the operator input
const operator = prompt('Enter operator ( either +, -, * or / ): ');

// take the operand input
const number1 = parseFloat(prompt('Enter first number: '));
const number2 = parseFloat(prompt('Enter second number: '));

switch(operator) {
    case '+':
         result = number1 + number2;
        console.log(`${number1} + ${number2} = ${result}`);
        break;

    case '-':
         result = number1 - number2;
        console.log(`${number1} - ${number2} = ${result}`);
        break;

    case '*':
         result = number1 * number2;
        console.log(`${number1} * ${number2} = ${result}`);
        break;

    case '/':
         result = number1 / number2;
        console.log(`${number1} / ${number2} = ${result}`);
        break;

    default:
        console.log('Invalid operator');
        break;
}

Run Code

Output

Enter operator: +
Enter first number: 4
Enter second number: 5
4 + 5 = 9

In above program, the user is asked to enter either +, -, * or /, and two numbers. Then, the switch statement executes cases based on the user input.


JavaScript Program to Find the Sum of Natural Numbers



The positive integers 1, 2, 3, ... are known as natural numbers.
Example 1: Sum of Natural Numbers Using for Loop

// program to display the sum of natural numbers

// take input from the user
const number = parseInt(prompt('Enter a positive integer: '));

let sum = 0;

// looping from i = 1 to number
// in each iteration, i is increased by 1
for (let i = 1; i <= number; i++) {
    sum += i;
}

console.log('The sum of natural numbers:', sum);

Run Code

Output

Enter a positive integer: 100
The sum of natural numbers: 5050

In the above program, the user is prompted to enter a number.

The parseInt() converts the numeric string value to an integer value.

The for loop is used to find the sum of natural numbers up to the number provided by the user.

    The value of sum is 0 initially.
    Then, a for loop is used to iterate from i = 1 to 100.
    In each iteration, i is added to sum and the value of i is increased by 1.
    When i becomes 101, the test condition is false and sum will be equal to 0 + 1 + 2 + ... + 100.

Example 2: Sum of Natural Numbers Using while Loop

// program to display the sum of natural numbers

// take input from the user
const number = parseInt(prompt('Enter a positive integer: '));

let sum = 0, i = 1;

// looping from i = 1 to number
while(i <= number) {
    sum += i;
    i++;
}

console.log('The sum of natural numbers:', sum);

Run Code

Output

Enter a positive integer: 100
The sum of natural numbers: 5050

In the above program, the user is prompted to enter a number.

The while loop is used to find the sum of natural numbers.

    The while loop continues until the number is less than or equal to 100.
    During each iteration, i is added to the sum variable and the value of i is increased by 1.
    When i becomes 101, the test condition is false and sum will be equal to 0 + 1 + 2 + ... + 100.


JavaScript Program to Check if the Numbers Have Same Last Digit


Example: Check the Last Digit

/* program to check whether the last digit of three
numbers is same */

// take input
const a = prompt('Enter a first integer: ');
const b = prompt('Enter a second integer: ');
const c = prompt('Enter a third integer: ');

// find the last digit
const result1 = a % 10;
const result2 = b % 10;
const result3 = c % 10;

// compare the last digits
if(result1 == result2 && result1 == result3) {
    console.log(`${a}, ${b} and ${c} have the same last digit.`);
}
else {
    console.log(`${a}, ${b} and ${c} have different last digit.`);
}

Run Code

Output

Enter a first integer: 8
Enter a second integer: 38
Enter a third integer: 88
8, 38 and 88 have the same last digit.

In the above example, the user is asked to enter three integers.

The three integer values are stored in variables a, b and c.

The last digit of an integer value is calculated using a modulus operator %.

% gives the remainder value. For example, 58 % 10 gives 8.

All the last digits are then compared using if..else statement and logical AND operator && operator.


JavaScript Program to Find HCF or GCD



The Highest Common Factor (HCF) or Greatest Common Divisor (GCD) of two integers is the largest integer that can exactly divide both integers (without a remainder).

For example, the HCF of 60 and 72 is 12.
Example 1: Find HCF using for Loop

// program to find the HCF or GCD of two integers

let hcf;
// take input
const number1 = prompt('Enter a first positive integer: ');
const number2 = prompt('Enter a second positive integer: ');

// looping from 1 to number1 and number2
for (let i = 1; i <= number1 && i <= number2; i++) {

    // check if is factor of both integers
    if( number1 % i == 0 && number2 % i == 0) {
        hcf = i;
    }
}

// display the hcf
console.log(`HCF of ${number1} and ${number2} is ${hcf}.`);

Run Code

Output

Enter a first integer: 60
Enter a second integer: 72
HCF of 60 and 72 is 12.

In the above program, the user is prompted to enter two positive numbers.

The for loop is used to iterate from 1 to numbers entered by the user.

The if condition and modulus operator % is used to find the HCF of both numbers.

In the above condition, if both the integers number1 and number2 are exactly divisible by i, the highest integer value that fulfils that condition is calculated.
Example 2: HCF using while Loop and if...else

// program to find the HCF or GCD of two integers

// take input
let number1 = prompt('Enter a first positive integer: ');
let number2 = prompt('Enter a second positive integer: ');

// looping until both numbers are equal
while(number1 != number2){
    if(number1 > number2) {
        number1 -= number2;
    }
    else {
        number2 -= number1;
    }
}

// display the hcf
console.log(`HCF is ${number1}`);

Run Code

Output

Enter a first integer: 60
Enter a second integer: 72
HCF is 12

In the above program, a while loop is used with an if...else statement.

In each iteration, the smaller integer is subtracted from the larger integer. And the result is assigned to a variable holding the larger integer.

The while loop continues until both the integers become equal.


JavaScript Program to Find LCM



The Least Common Multiple (LCM) of two integers is the smallest positive integer that is perfectly divisible by both integers.

For example, the LCM of 6 and 8 is 24.
Example 1: LCM Using while Loop and if Statement

// program to find the LCM of two integers

// take input
const num1 = prompt('Enter a first positive integer: ');
const num2 = prompt('Enter a second positive integer: ');

// higher number among number1 and number2 is stored in min
let min = (num1 > num2) ? num1 : num2;

// while loop
while (true) {
    if (min % num1 == 0 && min % num2 == 0) {
        console.log(`The LCM of ${num1} and ${num2} is ${min}`);
        break;
    }
    min++;
}

Run Code

Output

Enter a first positive integer: 6
Enter a second positive integer: 8
The LCM of 6 and 8 is 24

In the above program, the user is prompted to enter two positive integers.

The greater number among the numbers provided by the user is stored in a min variable. The LCM of two numbers cannot be less than the greater number.

The while loop is used with an if statement. In each iteration,

    The variable min is divided by both the num1 and num2.
    If both numbers' remainders are equal to 0, then it is the LCM and the break statement terminates the program.
    If both numbers' remainders are not equal to 0, the value of min is increased by 1 and the loop continues.
    The while loop continues until the condition is met.

    if (min % num1 == 0 && min % num2 == 0)

The LCM of two numbers can also be found using the formula:

LCM = (num1*num2) / HCF

To learn about how to find the HCF, visit the JavaScript program to find HCF.
Example 2: LCM Calculation Using HCF

// program to find the LCM of two integers

let hcf;
// take input
const number1 = prompt('Enter a first positive integer: ');
const number2 = prompt('Enter a second positive integer: ');

// looping from 1 to number1 and number2 to find HCF
for (let i = 1; i <= number1 && i <= number2; i++) {

    // check if is factor of both integers
    if( number1 % i == 0 && number2 % i == 0) {
        hcf = i;
    }
}

// find LCM
let lcm = (number1 * number2) / hcf;

// display the hcf
console.log(`HCF of ${number1} and ${number2} is ${lcm}.`);

Run Code

Output

Enter a first positive integer: 6
Enter a second positive integer: 8
The LCM of 6 and 8 is 24.

In the above program, firstly HCF of the numbers is calculated. Then LCM is calculated using the given formula.


JavaScript Program to Find the Factors of a Number



To be the factors of a number, the factor number should exactly divide the number (with 0 remainder). For example,

The factor of 12 is 1, 2, 3, 4, 6, and 12.
Example: Factors of Positive Number

// program to find the factors of an integer

// take input
const num = prompt('Enter a positive number: ');

console.log(`The factors of ${num} is:`);

// looping through 1 to num
for(let i = 1; i <= num; i++) {

    // check if number is a factor
    if(num % i == 0) {
        console.log(i);
    }
}

Run Code

Output

Enter a positive number: 12
The factors of 12 is:
1
2
3
4
6
12

In the above program, the user is prompted to enter a positive integer.

    The for loop is used to loop through 1 to the number entered by the user.
    The modulus operator % is used to check if num is exactly divisible.
    In each iteration, a condition is checked if num is exactly divisible by i.

    if(num % i == 0)

    If the above condition is met, the number is displayed.


JavaScript Program to Find Sum of Natural Numbers Using Recursion



The positive integers 1, 2, 3, ... are known as natural numbers.
Example: Sum of Natural Numbers Using Recursion

// program to find the sum of natural numbers using recursion

function sum(num) {
    if(num > 0) {
        return num + sum(num - 1);
    }
    else {
        return num;
    }
 }

// take input from the user
const number = parseInt(prompt('Enter a positive integer: '));

const result = sum(number);

// display the result
console.log(`The sum is ${result}`);

Run Code

Output

Enter a positive integer: 5
The sum is 15

In the above program, the user is prompted to enter a number.

Then the sum() function is called by passing the parameter (here 5) that the user entered.

    If the number is greater than 0, the function calls itself by decreasing the number by 1.
    This process continues until the number is 1. When the number reaches 0, the program stops.
    If the user enters a negative number, the negative number is returned and the program stops.

Here,

sum(5) returns 5 + sum(4)
sum(4) returns 5 + 4 + sum(3)
sum(3) returns 5 + 4 + 3 + sum(2)
sum(2) returns 5 + 4 + 3 + 2 + sum(1)
sum(1) returns 5 + 4 + 3 + 2 + 1 + sum(0)
sum(0) returns 5 + 4 + 3 + 2 + 1 + 0


JavaScript Program to Guess a Random Number


Example: Program to Guess a Number

// program where the user has to guess a number generated by a program

function guessNumber() {

    // generating a random integer from 1 to 10
    const random = Math.floor(Math.random() * 10) + 1;

    // take input from the user
    let number = parseInt(prompt('Guess a number from 1 to 10: '));

    // take the input until the guess is correct
    while(number !== random) {
        number = parseInt(prompt('Guess a number from 1 to 10: '));
    }

    // check if the guess is correct
    if(number == random) {
        console.log('You guessed the correct number.');
    }

  }

// call the function
guessNumber();

Run Code

Output

Guess a number from 1 to 10: 1
Guess a number from 1 to 10: 8
Guess a number from 1 to 10: 5
Guess a number from 1 to 10: 4
You guessed the correct number.

Note: You will get different output values each time you run the program because each time a different number is generated.

In the above program, the guessNumber() function is created where a random number from 1 to 10 is generated using Math.random() function.

To learn more about how to generate a random number, visit JavaScript Generate Random Number.

    The user is prompted to guess a number from 1 to 10.
    The parseInt() converts the numeric string value to an integer value.
    The while loop is used to take input from the user until the user guesses the correct answer.
    The if...else statement is used to check the condition. The equal to == operator is used to check if the guess was correct.

    if(number == random)

JavaScript Program to Shuffle Deck of Cards


Example: Shuffle Deck of Cards

// program to shuffle the deck of cards

// declare card elements
const suits = ["Spades", "Diamonds", "Club", "Heart"];
const values = [
  "Ace",
  "2",
  "3",
  "4",
  "5",
  "6",
  "7",
  "8",
  "9",
  "10",
  "Jack",
  "Queen",
  "King",
];

// empty array to contain cards
let deck = [];

// create a deck of cards
for (let i = 0; i < suits.length; i++) {
    for (let x = 0; x < values.length; x++) {
        let card = { Value: values[x], Suit: suits[i] };
        deck.push(card);
    }
}

// shuffle the cards
for (let i = deck.length - 1; i > 0; i--) {
    let j = Math.floor(Math.random() * i);
    let temp = deck[i];
    deck[i] = deck[j];
    deck[j] = temp;
}

console.log('The first five cards are:');

// display 5 results
for (let i = 0; i < 5; i++) {
    console.log(`${deck[i].Value} of ${deck[i].Suit}`)
}

Run Code

Output

The first five cards are:
4 of Club
5 of Diamonds
Jack of Diamonds
2 of Club
4 of Spades

In the above program, the suits and values variables contain the elements of a card.

The nested for loop is used to create a deck of cards.

    We need to create a deck of cards containing each suits with all the values. So the first for loop iterates over all the suits and the second for loop iterates over the values. Then, the elements are created and added to the deck array.
    The array elements are stored as an object as:

    [{Value: "Ace", Suit: "Spades"},{Value: "2", Suit: "Spades"}.....]

The second for loop is used to shuffle the deck of cards.

    Math.random() generates a random number.
    Math.floor() returns the number by decreasing the value to the nearest integer value.
    A random number is generated between 0 and 51 and two card positions are swapped.

The third for loop is used to display the first five cards in the new deck.


JavaScript Program to Display Fibonacci Sequence Using Recursion



A fibonacci sequence is written as:

0, 1, 1, 2, 3, 5, 8, 13, 21, ...

The Fibonacci sequence is the integer sequence where the first two terms are 0 and 1. After that, the next term is defined as the sum of the previous two terms. Hence, the nth term is the sum of (n-1)th term and (n-2)th term.
Example: Fibonacci Sequence Upto nth Term using Recursion

// program to display fibonacci sequence using recursion
function fibonacci(num) {
    if(num < 2) {
        return num;
    }
    else {
        return fibonacci(num-1) + fibonacci(num - 2);
    }
}

// take nth term input from the user
const nTerms = prompt('Enter the number of terms: ');

if(nTerms <=0) {
    console.log('Enter a positive integer.');
}
else {
    for(let i = 0; i < nTerms; i++) {
        console.log(fibonacci(i));
    }
}

Run Code

Output

Enter the number of terms: 5
0
1
1
2
3

In the above program, a recursive function fibonacci() is used to find the fibonacci sequence.

    The user is prompted to enter a number of terms up to which they want to print the Fibonacci sequence(here 5).
    The if...else statement is used to check if the number is greater than 0.
    If the number is greater than 0, a for loop is used to calculate each term recursively (calls the fibonacci() function again).


JavaScript Program to Find Factorial of Number Using Recursion



The factorial of a number is the product of all the numbers from 1 to that number. For example,

factorial of 5 is equal to 1 * 2 * 3 * 4 * 5 = 120.

The factorial of a positive number n is given by:

factorial of n (n!) = 1 * 2 * 3 * 4.....n

The factorial of negative numbers do not exist and the factorial of 0 is 1.
Example: Find Factorial Using Recursion

// program to find the factorial of a number
function factorial(x) {

    // if number is 0
    if (x == 0) {
        return 1;
    }

    // if number is positive
    else {
        return x * factorial(x - 1);
    }
}

// take input from the user
const num = prompt('Enter a positive number: ');

// calling factorial() if num is positive
if (num >= 0) {
    const result = factorial(num);
    console.log(`The factorial of ${num} is ${result}`);
}
else {
    console.log('Enter a positive number.');
}

Run Code

Output

Enter a positive number: 4
The factorial of 4 is 24

In the above program, the user is prompted to enter a number.

When the user enters a negative number, a message Enter a positive number. is shown.

When the user enters a positive number or 0, the function factorial(num) gets called.

    If the user enters the number 0, the program will return 1.
    If the user enters a number greater than 0, the program will recursively call itself by decreasing the number.
    This process continues until the number becomes 1. Then when the number reaches 0, 1 is returned.

Here,

factorial(4) returns 4 * factorial(3)
factorial(3) returns 4 * 3 * factorial(2)
factorial(2) returns 4 * 3 * 2 * factorial(1)
factorial(1) returns 4 * 3 * 2 * 1 * factorial(0)
factorial(0) returns 4 * 3 * 2 * 1 * 1

JavaScript Program to Convert Decimal to Binary


Example 1: Convert Decimal to Binary

// program to convert decimal to binary
function convertToBinary(x) {
    let bin = 0;
    let rem, i = 1, step = 1;
    while (x != 0) {
        rem = x % 2;
        console.log(
            `Step ${step++}: ${x}/2, Remainder = ${rem}, Quotient = ${parseInt(x/2)}`
        );
        x = parseInt(x / 2);
        bin = bin + rem * i;
        i = i * 10;
    }
    console.log(`Binary: ${bin}`);
}

// take input
let number = prompt('Enter a decimal number: ');

convertToBinary(number);

Run Code

Output

Step 1: 9/2, Remainder = 1, Quotient = 4
Step 2: 4/2, Remainder = 0, Quotient = 2
Step 3: 2/2, Remainder = 0, Quotient = 1
Step 4: 1/2, Remainder = 1, Quotient = 0
Binary: 1001

In the above program, the user is prompted to enter a decimal number. The number entered by the user is passed as an argument to the convertToBinary() function.

The while loop is used until the number entered by the user becomes 0.

The binary value is calculated by:

bin = bin + rem * i;

Here, rem is the modulus % value of the number when divided by 2 and i gives the place value of the binary number.
Example 2: Convert Decimal to Binary Using toString()

// program to convert decimal to binary

// take input
const number = parseInt(prompt('Enter a decimal number: '));

// convert to binary
const result = number.toString(2);

console.log('Binary:' + ' ' + result);

Run Code

Output

Enter a decimal number: 9
Binary: 1001

In the above program, the user is prompted to enter a number. The parseInt() method is used to convert a string value to an integer.

The JavaScript built-in method toString([radix]) returns a string value in a specified radix (base). Here, toString(2) converts the decimal number to binary number.


JavaScript Program to Find ASCII Value of Character

ASCII stands for American Standard Code for Information Interchange.

ASCII is a numeric value that is given to different characters and symbols for computers to store and manipulate. For example, the ASCII value of the letter 'A' is 65.

Example 1: ASCII Value of Character Using charCodeAt()

// program to find the ASCII value of a character

// take input from the user
const string = prompt('Enter a character: ');

// convert into ASCII value
const result = string.charCodeAt(0);

console.log(`The ASCII value is: ${result}`);

Output

Enter a character: a
The ASCII value is: 97

In the above program, the charCodeAt() method is used to find the ASCII value of a character.

The charCodeAt() method takes in an index value and returns an integer representing its UTF-16 (16-bit Unicode Transformation Format) code.

If you don't pass the index value, the default index value will be 0. If the index value is out of range, it gives NaN.
Example 2: ASCII Value of Character Using codePointAt()

// program to find the ASCII value of a character

// take input from the user
const string = prompt('Enter a character: ');

// convert into ASCII value
const result = string.codePointAt(0);

console.log(`The ASCII value is: ${result}`);

Run Code

Output

Enter a character: abc
The ASCII value is: 97

In the above program, the codePointAt() method is used to find the ASCII value of a character.

The codePointAt() method returns a Unicode code point value.

In the above program, the user inputs three-character string abc. However, the index 0 is passed to the codePointAt() method. This gives the ASCII value of the first character (here a).

If you don't pass the index value, the default index value will be 0. If the index value is out of range, it gives undefined.

JavaScript Program to Check Whether a String is Palindrome or Not



A string is a palindrome if it is read the same from forward or backward. For example, dad reads the same either from forward or backward. So the word dad is a palindrome. Similarly, madam is also a palindrome.
Example 1: Check Palindrome Using for Loop

// program to check if the string is palindrome or not

function checkPalindrome(string) {

    // find the length of a string
    const len = string.length;

    // loop through half of the string
    for (let i = 0; i < len / 2; i++) {

        // check if first and last string are same
        if (string[i] !== string[len - 1 - i]) {
            return 'It is not a palindrome';
        }
    }
    return 'It is a palindrome';
}

// take input
const string = prompt('Enter a string: ');

// call the function
const value = checkPalindrome(string);

console.log(value);

Run Code

Output

Enter a string: madam
It is a palindrome

In the above program, the checkPalindrome() function takes input from the user.

    The length of the string is calculated using the length property.
    The for loop is used to iterate up to the half of the string. The if condition is used to check if the first and the corresponding last characters are the same. This loop continues till the half of the string.
    During the iteration, if any character of the string, when compared with its corresponding last string is not equal, the string is not considered a palindrome.

Example 2: Check Palindrome using built-in Functions

// program to check if the string is palindrome or not

function checkPalindrome(string) {

    // convert string to an array
    const arrayValues = string.split('');

    // reverse the array values
    const reverseArrayValues = arrayValues.reverse();

    // convert array to string
    const reverseString = reverseArrayValues.join('');

    if(string == reverseString) {
        console.log('It is a palindrome');
    }
    else {
        console.log('It is not a palindrome');
    }
}

//take input
const string = prompt('Enter a string: ');

checkPalindrome(string);

Run Code

Output

Enter a string: hello
It is not a palindrome

In the above program, the palindrome is checked using the built-in methods available in JavaScript.

    The split('') method converts the string into individual array characters.

    const arrayValues = string.split(''); // ["h", "e", "l", "l", "o"]

    The reverse() method reverses the position in an array.

    // ["o", "l", "l", "e", "h"]
    const reverseArrayValues = arrayValues.reverse();

    The join('') method joins all the elements of an array into a string.

    const reverseString = reverseArrayValues.join(''); // "olleh"

    Then the if...else statement is used to check if the string and the reversed string are equal. If they are equal, the string is a palindrome.

Note: The multiple lines of code can be reduced and written in one line:

const reverseString = string.split('').reverse().join('');

JavaScript Program to Sort Words in Alphabetical Order


Example: Sort Words in Alphabetical Order

// program to sort words in alphabetical order

// take input
const string = prompt('Enter a sentence: ');

// converting to an array
const words = string.split(' ');

// sort the array elements
words.sort();

// display the sorted words
console.log('The sorted words are:');

for (const element of words) {
  console.log(element);
}

Run Code

Output

Enter a sentence: I am learning JavaScript
The sorted words are:
I
JavaScript
am
learning

In the above example, the user is prompted to enter a sentence.

    The sentence is divided into array elements (individual words) using the split(' ') method. The split(' ') method splits the string at whitespaces.
     
    The elements of an array are sorted using the sort() method. The sort() method sorts the strings in alphabetical and ascending order.
    The for...of loop is used to iterate over the array elements and display them.

Here, we are sorting alphabetically. So, the expected output is am, I, JavaScript, and learning. However, am is printed after I and JavaScript.

Why I and JavaScript are printed before am?

This is because I and J of JavaScript are in uppercase. And, when we use the sort() method, uppercase letters are placed before lowercase.

We can verify this by providing only lowercase input.

// program to sort words in alphabetical order

// take input
const string = prompt('Enter a sentence: ');

// converting to an array
const words = string.split(' ');

// sort the array elements
words.sort();

// display the sorted words
console.log('The sorted words are:');

for (const element of words) {
  console.log(element);
}

Run Code

Output

Enter a sentence: i am learning javascript
The sorted words are:
am
i
javascript
learning

Here, we get the expected output now.

Note: Instead of displaying from the array values, you can also convert the array elements back to the string and display the values as a string using join() method.

words.join(' '); // I JavaScript am learning

JavaScript Program to Replace Characters of a String


Example: Replace First Occurrence of a Character in a String

// program to replace a character of a string

const string = 'Mr Red has a red house and a red car';

// replace the characters
const newText = string.replace('red', 'blue');

// display the result
console.log(newText);

Run Code

Output

Mr Red has a blue house and a red car

In the above program, the replace() method is used to replace the specified string with another string.

When a string is passed in the replace() method, it replaces only the first instance of the string. So if there is a second match in the string, it won't be replaced.

You could also pass a regular expression (regex) inside the replace() method to replace the string.
Example 2: Replace Character of a String Using RegEx

// program to replace a character of a string

const string = 'Mr Red has a red house and a red car';

// regex expression
const regex = /red/g;

// replace the characters
const newText = string.replace(regex, 'blue');

// display the result
console.log(newText);

Run Code

Output

Mr Red has a blue house and a blue car

In the above program, a regex expression is used as the first parameter inside the replace() method.

/g refers to global. It means that all the matching characters in the string are replaced.

Since JavaScript is case-sensitive, R and r are treated as different values.

You could also use the regex to perform case-insensitive replacement using /gi, where i represents case-insensitive.



JavaScript Program to Reverse a String


Example 1: Reverse a String Using for Loop

// program to reverse a string

function reverseString(str) {

    // empty string
    let newString = "";
    for (let i = str.length - 1; i >= 0; i--) {
        newString += str[i];
    }
    return newString;
}

// take input from the user
const string = prompt('Enter a string: ');

const result = reverseString(string);
console.log(result);

Run Code

Output

Enter a string: hello world
dlrow olleh

In the above program, the user is prompted to enter a string. That string is passed to the reverseString() function.

Inside the reverseString() function,

    An empty newString variable is created.
    The for loop is used to iterate over the strings. During the first iteration, str.length - 1 gives the position of the last element. That element is added to the newString variable.
    This process continues for all the string elements.
    The value of i decreases in each iteration and continues until it becomes 0.

Example 2: Reverse a String Using built-in Methods

// program to reverse a string

function reverseString(str) {

    // return a new array of strings
    const arrayStrings = str.split("");
   
    // reverse the new created array elements
    const reverseArray = arrayStrings.reverse();
 
    // join all elements of the array into a string
    const joinArray = reverseArray.join("");
    
    // return the reversed string
    return joinArray;
}
 
// take input from the user
const string = prompt('Enter a string: ');

const result = reverseString(string);
console.log(result);

Run Code

Output

Enter a string: hello
olleh

In the above program, the built-in methods are used to reverse a string.

    First, the string is split into individual array elements using the split() method. str.split("") gives ["h", "e", "l", "l", "o"].
    The string elements are reversed using the reverse() method. arrayStrings.reverse() gives ["o", "l", "l", "e", "h"].
    The reversed string elements are joined into a single string using the join() method. reverseArray.join("") gives olleh.

JavaScript Program to Create Objects in Different Ways



You can create an object in three different ways:

    Using object literal
    By creating instance of Object directly
    By using constructor function

Example 1: Using object literal

// program to create JavaScript object using object literal
const person = { 
    name: 'John',
    age: 20,
    hobbies: ['reading', 'games', 'coding'],
    greet: function() {
        console.log('Hello everyone.');
    },
    score: {
        maths: 90,
        science: 80
    }
};

console.log(typeof person); // object

// accessing the object value
console.log(person.name);
console.log(person.hobbies[0]);
person.greet();
console.log(person.score.maths);

Run Code

Output

object
John
reading
Hello everyone.
90

In this program, we have created an object named person.

You can create an object using an object literal. An object literal uses { } to create an object directly.

An object is created with a key:value pair.

You can also define functions, arrays and even objects inside of an object. You can access the value of the object using dot . notation.

The syntax for creating an object using instance of an object is:

const objectName = new Object();

Example 2: Create an Object using Instance of Object Directly

// program to create JavaScript object using instance of an object
const person = new Object ( { 
    name: 'John',
    age: 20,
    hobbies: ['reading', 'games', 'coding'],
    greet: function() {
        console.log('Hello everyone.');
    },
    score: {
        maths: 90,
        science: 80
    }
});

console.log(typeof person); // object

// accessing the object value
console.log(person.name);
console.log(person.hobbies[0]);
person.greet();
console.log(person.score.maths);

Run Code

Output

object
John
reading
Hello everyone.
90

Here, the new keyword is used with the Object() instance to create an object.
Example 3: Create an object using Constructor Function

// program to create JavaScript object using instance of an object

function Person() {
    this.name = 'John',
    this.age = 20,
    this.hobbies = ['reading', 'games', 'coding'],
    this.greet = function() {
        console.log('Hello everyone.');
    },
    this.score = {
        maths: 90,
        science: 80
    }

}

const person = new Person();

console.log(typeof person); // object

// accessing the object value
console.log(person.name);
console.log(person.hobbies[0]);
person.greet();
console.log(person.score.maths);

Run Code

Output

object
John
reading
Hello everyone.
90

In the above example, the Person() constructor function is used to create an object using the new keyword.

new Person() creates a new object.


JavaScript Program to Check the Number of Occurrences of a Character in the String



If you check the number of occurrences of 'o' in the string 'school', the result is 2.
Example 1: Check Occurrence of a Character Using for Loop

// program to check the number of occurrence of a character

function countString(str, letter) {
    let count = 0;

    // looping through the items
    for (let i = 0; i < str.length; i++) {

        // check if the character is at that position
        if (str.charAt(i) == letter) {
            count += 1;
        }
    }
    return count;
}

// take input from the user
const string = prompt('Enter a string: ');
const letterToCheck = prompt('Enter a letter to check: ');

//passing parameters and calling the function
const result = countString(string, letterToCheck);

// displaying the result
console.log(result);

Run Code

Output

Enter a string: school
Enter a  letter to check: o
2

In the above example, the user is prompted to enter a string and the character to check.

    In the beginning, the value of the count variable is 0.
    The for loop is used to iterate over the strings.
    The charAt() method returns a character at a specified index.
    During each iteration, if the character at that index matches the required character to match, then the count variable is increased by 1.

Example 2: Check occurrence of a character using a Regex

// program to check the occurrence of a character

function countString(str, letter) {

    // creating regex 
    const re = new RegExp(letter, 'g');

    // matching the pattern
    const count = str.match(re).length;

    return count;
}

// take input from the user
const string = prompt('Enter a string: ');
const letterToCheck = prompt('Enter a letter to check: ');

//passing parameters and calling the function
const result = countString(string, letterToCheck);

// displaying the result
console.log(result);

Run Code

Output

Enter a string: school
Enter a  letter to check: o
2

In the above example, a regular expression (regex) is used to find the occurrence of a string.

    const re = new RegExp(letter, 'g'); creates a regular expression.
    The match() method returns an array containing all the matches. Here, str.match(re);gives ["o", "o"].
    The length property gives the length of an array element.



JavaScript Program to Convert the First Letter of a String into UpperCase


Example 1: Convert First letter to UpperCase

// program to convert first letter of a string to uppercase
function capitalizeFirstLetter(str) {

    // converting first letter to uppercase
    const capitalized = str.charAt(0).toUpperCase() + str.slice(1);

    return capitalized;
}

// take input
const string = prompt('Enter a string: ');

const result = capitalizeFirstLetter(string);

console.log(result);

Run Code

Output

Enter a string: javaScript
JavaScript

In the above program, the user is prompted to enter a string and that string is passed into the capitalizeFirstLetter() function.

    The string's first character is extracted using charAt() method. Here, str.charAt(0); gives j.
    The toUpperCase() method converts the string to uppercase. Here, str.charAt(0).toUpperCase(); gives J.
    The slice() method returns the rest of the string.
    Here, str.slice(1); gives avaScript.
    These two values are concatenated using the + operator.

Note: You can also extract the first character of a string using an array accessing property: str[0].

str.str[0]; // j

Example 2: Convert First letter to UpperCase using Regex

// program to convert first letter of a string to uppercase
function capitalizeFirstLetter(str) {

    // converting first letter to uppercase
    const capitalized = str.replace(/^./, str[0].toUpperCase());

    return capitalized;
}

// take input
const string = prompt('Enter a string: ');

const result = capitalizeFirstLetter(string);

console.log(result);

Run Code

Output

Enter a string: javaScript
JavaScript

In the above program, the regular expression (regex) is used to convert the first letter of a string to uppercase.

    The regex pattern is /^./ matches the first character of a string.
    The toUpperCase() method converts the string to uppercase.


JavaScript Program to Count the Number of Vowels in a String



The five letters a, e, i, o and u are called vowels. All other alphabets except these 5 vowels are called consonants.
Example 1: Count the Number of Vowels Using Regex

// program to count the number of vowels in a string

function countVowel(str) { 

    // find the count of vowels
    const count = str.match(/[aeiou]/gi).length;

    // return number of vowels
    return count;
}

// take input
const string = prompt('Enter a string: ');

const result = countVowel(string);

console.log(result);

Run Code

Output

Enter a string: JavaScript program
5

In the above program, the user is prompted to enter a string and that string is passed to the countVowel() function.

    The regular expression (RegEx) pattern is used with the match() method to find the number of vowels in a string.
    The pattern /[aeiou]/gi checks for all the vowels (case-insensitive) in a string. Here,
    str.match(/[aeiou]/gi); gives ["a", "a", "i", "o", "a"]
    The length property gives the number of vowels present.

Example 2: Count the Number of Vowels Using for Loop

// program to count the number of vowels in a string

// defining vowels
const vowels = ["a", "e", "i", "o", "u"]

function countVowel(str) {
    // initialize count
    let count = 0;

    // loop through string to test if each character is a vowel
    for (let letter of str.toLowerCase()) {
        if (vowels.includes(letter)) {
            count++;
        }
    }

    // return number of vowels
    return count
}

// take input
const string = prompt('Enter a string: ');

const result = countVowel(string);

console.log(result);

Run Code

Output

Enter a string: JavaScript program
5

In the above example,

    All the vowels are stored in a vowels array.
    Initially, the value of the count variable is 0.
    The for...of loop is used to iterate over all the characters of the string.
    The toLowerCase() method converts all the characters of a string to lowercase.
    The includes() method checks if the vowel array contains any of the characters of the string.
    If any character matches, the value of count is increased by 1.



JavaScript Program to Remove a Property from an Object



An object is written in a key/value pair. The key/value pair is called a property. For example,

const student = {
    name: 'John',
    age: 22
}

Here, name: 'John' and age: 22 are the two properties of a student object.
Example: Remove a Property From an Object

// program to remove a property from an object

// creating an object
const student = { 
    name: 'John',
    age: 20,
    hobbies: ['reading', 'games', 'coding'],
    greet: function() {
        console.log('Hello everyone.');
    },
    score: {
        maths: 90,
        science: 80
    }
};

// deleting a property from an object
delete student.greet;
delete student['score'];

console.log(student);

Run Code

Output

{
  age: 20,
  hobbies: ["reading", "games", "coding"],
  name: "John"
}

In the above program, the delete operator is used to remove a property from an object.

You can use the delete operator with . or [ ] to remove the property from an object.

Note: You should not use the delete operator on predefined JavaScript object properties.


JavaScript Program to Check Whether a String Starts and Ends With Certain Characters


Example 1: Check String Using Built-in Methods

// program to check if a string starts with 'S' and ends with 'G'

function checkString(str) {

    // check if the string starts with S and ends with G
    if(str.startsWith('S') && str.endsWith('G')) {
        console.log('The string starts with S and ends with G');
    }
    else if(str.startsWith('S')) {
        console.log('The string starts with S but does not end with G');
    }
     else if(str.endsWith('G')) {
        console.log('The string starts does not with S but end with G');
    }
    else {
        console.log('The string does not start with S and does not end with G');
    }
}


// take input
let string = prompt('Enter a string: ');
checkString(string);

Run Code

Output

Enter a string: String
The string starts with S but does not end with G

In the above program, the two methods startsWith() and endsWith() are used.

    The startsWith() method checks if the string starts with the particular string.
    The endsWith() method checks if the string ends with the particular string.

The above program does not check for lowercase letters. Hence, here G and g are different.

You could also check if the above character starts with S or s and ends with G or g.

str.startsWith('S') || str.startsWith('s') && str.endsWith('G') || str.endsWith('g');

Example 2: Check The String Using Regex

// program to check if a string starts with 'S' and ends with 'G'

function checkString(str) {

    // check if the string starts with S and ends with G
    if( /^S/i.test(str) && /G$/i.test(str)) {
        console.log('The string starts with S and ends with G');
    }
    else if(/^S/i.test(str)) {
        console.log('The string starts with S but does not ends with G');
    }
     else if(/G$/i.test(str)) {
        console.log('The string starts does not with S but ends with G');
    }
    else {
        console.log('The string does not start with S and does not end with G');
    }
}

// for loop to show different scenario
for (let i = 0; i < 3; i++) {

    // take input
    const string = prompt('Enter a string: ');

    checkString(string);
}

Run Code

Output

Enter a string: String
The string starts with S and ends with G
Enter a string: string
The string starts with S and ends with G
Enter a string: JavaScript
The string does not start with S and does not end with G

In the above program, a regular expression (RegEx) is used with the test() method to check if the string starts with S and ends with G.

    The /^S/i pattern checks if the string is S or s. Here, i denotes that the string is case-insensitive. Hence, S and s are considered the same.
    The /G$/i patterns checks if the string is G or g.
    The if...else...if statement is used to check the conditions and display the outcome accordingly.
    The for loop is used to take different inputs from the user to show different cases.


JavaScript Program to Check if a Key Exists in an Object


Example 1: Check if Key Exists in Object Using in Operator

// program to check if a key exists

const person = {
    id: 1,
    name: 'John',
    age: 23
}

// check if key exists
const hasKey = 'name' in person;

if(hasKey) {
    console.log('The key exists.');
}
else {
    console.log('The key does not exist.');
}

Run Code

Output

The key exists.

In the above program, the in operator is used to check if a key exists in an object. The in operator returns true if the specified key is in the object, otherwise it returns false.
Example 2: Check if Key Exists in Object Using hasOwnProperty()

// program to check if a key exists

const person = {
    id: 1,
    name: 'John',
    age: 23
}

//check if key exists
const hasKey = person.hasOwnProperty('name');

if(hasKey) {
    console.log('The key exists.');
}
else {
    console.log('The key does not exist.');
}

Run Code

Output

The key exists.

In the above program, the hasOwnProperty() method is used to check if a key exists in an object. The hasOwnProperty() method returns true if the specified key is in the object, otherwise it returns false.


JavaScript Program to Clone a JS Object

A JavaScript object is a complex data type that can contain various data types. For example,

const person = {
    name: 'John',
    age: 21,
}

Here, person is an object. Now, you can't clone an object by doing something like this.

const copy = person;
console.log(copy); // {name: "John", age: 21}

In the above program, the copy variable has the same value as the person object. However, if you change the value of the copy object, the value in the person object will also change. For example,

copy.name = 'Peter';
console.log(copy.name); // Peter
console.log(person.name); // Peter

The change is seen in both objects because objects are reference types. And both <code>copy</code> and <code>person</code> are pointing to the same object.
Example 1. Clone the Object Using Object.assign()

// program to clone the object

// declaring object
const person = {
    name: 'John',
    age: 21,
}

// cloning the object
const clonePerson = Object.assign({}, person);

console.log(clonePerson);

// changing the value of clonePerson
clonePerson.name = 'Peter';

console.log(clonePerson.name);
console.log(person.name);

Run Code

Output

{name: "John", age: 21}
Peter
John

The Object.assign() method is part of the ES6 standard. The Object.assign() method performs deep copy and copies all the properties from one or more objects.

Note: The empty {} as the first argument ensures that you don't change the original object.
Example 2: Clone the Object Using Spread Syntax

// program to clone the object
// declaring object
const person = {
    name: 'John',
    age: 21,
}

// cloning the object
const clonePerson = { ... person}

console.log(clonePerson);

// changing the value of clonePerson
clonePerson.name = 'Peter';

console.log(clonePerson.name);
console.log(person.name);

Run Code

Output

{name: "John", age: 21}
Peter
John

The spread syntax ... was introduced in the later version(ES6).

The spread syntax can be used to make a shallow copy of an object. This means it will copy the object. However, the deeper objects are referenced. For example,

const person = {
    name: 'John',
    age: 21,

    // the inner objects will change in the shallow copy
    marks: { math: 66, english: 73}
}

// cloning the object
const clonePerson = { ... person}

console.log(clonePerson); // {name: "John", age: 21, marks: {…}}

// changing the value of clonePerson
clonePerson.marks.math = 100;

console.log(clonePerson.marks.math); // 100
console.log(person.marks.math); // 100

Run Code

Here, when the inner object value math is changed to 100 of clonePerson object, the value of the math key of the person object also changes.

Example 3: Clone the Object Using JSON.parse()

// program to clone the object
// declaring object
const person = {
    name: 'John',
    age: 21,
}

// cloning the object
const clonePerson = JSON.parse(JSON.stringify(person));

console.log(clonePerson);

// changing the value of clonePerson
clonePerson.name = 'Peter';

console.log(clonePerson.name);
console.log(person.name);

Run Code

Output

{name: "John", age: 21}
Peter
John

In the above program, the JSON.parse() method is used to clone an object.

Note: JSON.parse() only works with Number and String object literal. It does not work with an object literal with function or symbol properties.

JavaScript Program to Loop Through an Object


Example 1: Loop Through Object Using for...in

// program to loop through an object using for...in loop

const student = { 
    name: 'John',
    age: 20,
    hobbies: ['reading', 'games', 'coding'],
};

// using for...in
for (let key in student) { 
    let value;

    // get the value
    value = student[key];

    console.log(key + " - " +  value); 
} 

Run Code

Output

name - John
age - 20
hobbies - ["reading", "games", "coding"]

In the above example, the for...in loop is used to loop through the student object.

The value of each key is accessed by using student[key].

Note: The for...in loop will also count inherited properties.

For example,

const student = { 
    name: 'John',
    age: 20,
    hobbies: ['reading', 'games', 'coding'],
};

const person = {
    gender: 'male'
}

// inheriting property
student.__proto__ = person;

for (let key in student) { 
    let value;

    // get the value
    value = student[key];

    console.log(key + " - " +  value);
} 

Run Code

Output

name - John
age - 20
hobbies - ["reading", "games", "coding"]
gender - male

If you want, you can only loop through the object's own property by using the hasOwnProperty() method.

if (student.hasOwnProperty(key)) {
    ++count:
}

Example 2: Loop Through Object Using Object.entries and for...of

// program to loop through an object using for...in loop

const student = { 
    name: 'John',
    age: 20,
    hobbies: ['reading', 'games', 'coding'],
};

// using Object.entries
// using for...of loop
for (let [key, value] of Object.entries(student)) {
    console.log(key + " - " +  value);
}

Run Code

Output

name - John
age - 20
hobbies - ["reading", "games", "coding"]

In the above program, the object is looped using the Object.entries() method and the for...of loop.

The Object.entries() method returns an array of a given object's key/value pairs. The for...of loop is used to loop through an array.


JavaScript Program to Merge Property of Two Objects


Example 1: Merge Property of Two Objects Using Object.assign()

// program to merge property of two objects

// object 1
const person = {
    name: 'Jack',
    age:26
}

// object 2
const student = {
    gender: 'male'
}

// merge two objects
const newObj = Object.assign(person, student);

console.log(newObj);

Run Code

Output

{
    name: "Jack",
    age: 26,
    gender: "male"
}

In the above example, two objects are merged into one using the Object.assign() method.

The Object.assign() method returns an object by copying the values of all enumerable properties from one or more source objects.
Example 2: Merge Property of Two Objects Using Spread Operator

// program to merge property of two objects

// object 1
const person = {
    name: 'Jack',
    age:26
}

// object 2
const student = {
    gender: 'male'
}

// merge two objects
const newObj = {...person, ...student};

console.log(newObj);

Run Code

Output

{
    name: "Jack",
    age: 26,
    gender: "male"
}

In the above example, two objects are merged together using the spread operator ....

Note: In both the above examples, if the two objects have the same key, then the second object's key overwrites the first object's key.




JavaScript Program to Count the Number of Keys/Properties in an Object


Example 1: Count the Number of Key in an Object Using for...in

// program to count the number of keys/properties in an object

const student = { 
    name: 'John',
    age: 20,
    hobbies: ['reading', 'games', 'coding'],
};

let count = 0;

// loop through each key/value
for(let key in student) {

    // increase the count
    ++count;
}

console.log(count);

Run Code

Output

3

The above program counts the number of keys/properties in an object using the for...in loop.

The count variable is initially 0. Then, the for...in loop increases the count by 1 for every key/value in an object.

Note: While using the for...in loop, it will also count inherited properties.

For example,

const student = { 
    name: 'John',
    age: 20,
    hobbies: ['reading', 'games', 'coding'],
};

const person = {
    gender: 'male'
}

student.__proto__ = person;

let count = 0;

for(let key in student) {

    // increase the count
    ++count;
}

console.log(count); // 4

Run Code

If you only want to loop through the object's own property, you can use the hasOwnProperty() method.

if (student.hasOwnProperty(key)) {
    ++count:
}

Example 2: Count the Number of Key in an Object Using Object.key()

// program to count the number of keys/properties in an object

const student = { 
    name: 'John',
    age: 20,
    hobbies: ['reading', 'games', 'coding'],
};

// count the key/value
const result = Object.keys(student).length;

console.log(result);

Run Code

Output

3

In the above program, the Object.keys() method and the length property are used to count the number of keys in an object.

The Object.keys() method returns an array of a given object's own enumerable property names i.e. ["name", "age", "hobbies"].

The length property returns the length of the array.


JavaScript Program to Add Key/Value Pair to an Object


Example 1: Add Key/Value Pair to an Object Using Dot Notation

// program to add a key/value pair to an object

const person = {
    name: 'Monica',
    age: 22,
    gender: 'female'
}

// add a key/value pair
person.height = 5.4;

console.log(person);

Run Code

Output

{
    name: "Monica",
    age: 22,
    gender: "female",
    height: 5.4
}

In the above example, we add the new property height to the person object using the dot notation . i.e. person.height = 5.4;.
Example 2: Add Key/Value Pair to an Object Using Square Bracket Notation

// program to add a key/value pair to an object

const person = {
    name: 'Monica',
    age: 22,
    gender: 'female'
}

// add a key/value pair
person['height'] = 5.4;

console.log(person);

Run Code

Output

{
    name: "Monica",
    age: 22,
    gender: "female",
    height: 5.4
}

In the above example, we add the new property height to the person object using the square bracket notation [] i.e. person['height'] = 5.4;.



JavaScript Program to Replace All Occurrences of a String


Example 1: Replace All Occurrence of String Using RegEx

// program to replace all occurrence of a string

const string = 'Mr Red has a red house and a red car';

// regex expression
const regex = /red/gi;

// replace the characters
const newText = string.replace(regex, 'blue');

// display the result
console.log(newText);

Output

Mr blue has a blue house and a blue car

In the above program, a regex expression is used as the first parameter inside the replace() method.

/g refers to global (that replacement is done across the whole string) and /i refers to case-insensitive.

The replace() method takes the string that you want to replace as the first parameter and the string you want to replace with as the second parameter.
Example 2: Replace All Occurrence of String Using built-in Method

// program to replace all occurrence of a string

const string = 'Mr red has a red house and a red car';

const result = string.split('red').join('blue');

console.log(result);

Run Code

Output

Mr blue has a blue house and a blue car

In the above program, the built-in split() and join() method is used to replace all the occurrences of the string.

    The string is split into individual array elements using the split() method.
    Here, string.split('red') gives ["Mr ", " has a ", " house and a ", " car"] by splitting the string.
    The array elements are joined into a single string using the join() method.
    Here, reverseArray.join('blue') gives Mr blue has a blue house and a blue car by joining the array elements.


JavaScript Program to Create Multiline Strings

Example 1: Create Multiline Strings Using +

// program to create a multiline strings

// using the + operator
const message = 'This is a long message\n' + 
    'that spans across multiple lines\n' + 
    'in the code.'

console.log(message);

Run Code

Output

This is a long message
that spans across multiple lines
in the code.

In the above example, a multiline string is created using the + operator and \n.

The escape character \n is used to break the line.

Example 2: Create Multiline Strings Using \

// program to create a multiline strings

// using the \ operator
const message = 'This is a long message\n \
that spans across multiple lines\n \
in the code.'

console.log(message);

Run Code

Output

This is a long message
that spans across multiple lines
in the code.

In the above example, a multiline string is created using \. \n is used to break the line.
Example 3: Create Multiline Strings Using Template Literal

// program to create a multiline strings

// using the template literal

const message = `This is a long message
that spans across multiple lines
in the code.`

console.log(message);

Run Code

Output

This is a long message
that spans across multiple lines
in the code.

In the above example, the template literal ` ` is used to write multiline strings.

The template literal was introduced in the newer version of JavaScript (ES6).











