****************JavaScript Program To Print Hello World************

We will use these three ways to print 'Hello, World!'.

    console.log()
    alert()
    document.write()


1. Using console.log()

console.log() is used in debugging the code.

Source Code

// the hello world program
console.log('Hello World');

2. Using alert()

The alert() method displays an alert box over the current window with the specified message.

Source Code

// the hello world program
alert("Hello, World!");

3. Using document.write()

document.write() is used when you want to print the content to the HTML document.

Source Code

// the hello world program
document.write('Hello, World!');




JavaScript Program to Add Two Numbers

We use the + operator to add two or more numbers.
Example 1: Add Two Numbers

const num1 = 5;
const num2 = 3;

// add two numbers
const sum = num1 + num2;

// display the sum
console.log('The sum of ' + num1 + ' and ' + num2 + ' is: ' + sum);

Output

The sum of 5 and 3 is: 8

Example 2: Add Two Numbers Entered by the User

// store input numbers
const num1 = parseInt(prompt('Enter the first number '));
const num2 = parseInt(prompt('Enter the second number '));

//add two numbers
const sum = num1 + num2;

// display the sum
console.log(`The sum of ${num1} and ${num2} is ${sum}`);

Output

Enter the first number 5
Enter the second number 3
The sum of 5 and 3 is: 8

The above program asks the user to enter two numbers. Here, prompt() is used to take inputs from the user. parseInt() is used to convert the user input string to number.

const num1 = parseInt(prompt('Enter the first number '));
const num2 = parseInt(prompt('Enter the second number '));

Then, the sum of the numbers is computed.

const sum = num1 + num2;

Finally, the sum is displayed. To display the result, we have used the template literal ` `. This allows us to include variables inside strings.

console.log(`The sum of ${num1} and ${num2} is ${sum}`);

To include variables inside ``, you need to use the ${variable} format.

Note: Template literals was introduced in ES6 and some browsers may not support them.




JavaScript Program to Find the Square Root

To find the square root of a number in JavaScript, you can use the built-in Math.sqrt() method. Its syntax is:

Math.sqrt(number);

Here, the Math.sqrt() method takes a number and returns its square root.

Example: Square Root of a Number

// take the input from the user
const number = prompt('Enter the number: ');

const result = Math.sqrt(number);
console.log(`The square root of ${number} is ${result}`);

Output

Enter the number: 9 
The square root of 9 is 3

Example 2: Square Root of Different Data Types

const number1 = 2.25;
const number2 = -4;
const number3 = 'hello';

const result1 = Math.sqrt(number1);
const result2 = Math.sqrt(number2);
const result3 = Math.sqrt(number3);

console.log(`The square root of ${number1} is ${result1}`);
console.log(`The square root of ${number2} is ${result2}`);
console.log(`The square root of ${number3} is ${result3}`);

Output

The square root of 2.25 is 1.5
The square root of -4 is NaN
The square root of hello is NaN

    If 0 or a positive number is passed in the Math.sqrt() method, then the square root of that number is returned.
    If a negative number is passed, NaN is returned.
    If a string is passed, NaN is returned.
    
    


JavaScript Program to Calculate the Area of a Triangle 

If you know the base and height of a triangle, you can find the area using the formula:

area = (base * height) / 2

Example 1: Area When Base and Height is Known

const baseValue = prompt('Enter the base of a triangle: ');
const heightValue = prompt('Enter the height of a triangle: ');

// calculate the area
const areaValue = (baseValue * heightValue) / 2;

console.log(
  `The area of the triangle is ${areaValue}`
);

Output

Enter the base of a triangle: 4
Enter the height of a triangle: 6
The area of the triangle is 12

If you know all the sides of a triangle, you can find the area using Herons' formula. If a, b and c are the three sides of a triangle, then

s = (a+b+c)/2
area = √(s(s-a)*(s-b)*(s-c))

Example 2: Area When All Sides are Known

// JavaScript program to find the area of a triangle

const side1 = parseInt(prompt('Enter side1: '));
const side2 = parseInt(prompt('Enter side2: '));
const side3 = parseInt(prompt('Enter side3: '));

// calculate the semi-perimeter
const s = (side1 + side2 + side3) / 2;

//calculate the area
const areaValue = Math.sqrt(
  s * (s - side1) * (s - side2) * (s - side3)
);

console.log(
  `The area of the triangle is ${areaValue}`
);

Output

Enter side1: 3
Enter side2: 4
Enter side3: 5
The area of the triangle is 6

Here, we have used the Math.sqrt() method to find the square root of a number.

Note: If a triangle cannot be formed from the given sides, the program will not run correctly.

JavaScript Program to Swap Two Variables

Example 1: Using a Temporary Variable

//JavaScript program to swap two variables

//take input from the users
let a = prompt('Enter the first variable: ');
let b = prompt('Enter the second variable: ');

//create a temporary variable
let temp;

//swap variables
temp = a;
a = b;
b = temp;

console.log(`The value of a after swapping: ${a}`);
console.log(`The value of b after swapping: ${b}`);

Output

Enter the first variable: 4
Enter the second variable: 2
The value of a after swapping: 2
The value of b after swapping: 4

Here,

    We created a temp variable to store the value of a temporarily.
    We assigned the value of b to a.
    The value of temp is assigned to b

As a result, the value of the variables are swapped.

Note: You can also swap strings or other data types using this method.

Example 2: Using es6(ES2015) Destructuring assignment

//JavaScript program to swap two variables

//take input from the users
let a = prompt('Enter the first variable: ');
let b = prompt('Enter the second variable: ');

//using destructuring assignment
[a, b] = [b, a];

console.log(`The value of a after swapping: ${a}`);
console.log(`The value of b after swapping: ${b}`);

Run Code

Output

Enter the first variable: 4
Enter the second variable: 2
The value of a after swapping: 2
The value of b after swapping: 4

Here, a new es6 feature, called destructuring assignment [a, b] = [b, a], is used to swap the value of two variables. If [a, b] = [1, 2, 3], the value of a will be 1 and value of b will be 2.

    First a temporary array [b, a] is created. Here the value of [b, a] will be [2, 4].
    The destructuring of the array is done, i.e [a, b] = [2, 4].

As a result, the value of the variables are swapped.

Note: You can also swap strings or other data types using this method.

You can also swap the variable's values using the arithmetic operators.
Example 3: Using Arithmetic Operators

//JavaScript program to swap two variables

//take input from the users
let a = parseInt(prompt('Enter the first variable: '));
let b = parseInt(prompt('Enter the second variable: '));

// addition and subtraction operator
a = a + b;
b = a - b;
a = a - b;

console.log(`The value of a after swapping: ${a}`);
console.log(`The value of b after swapping: ${b}`);

Run Code

Output

Enter the first variable: 4
Enter the second variable: 2
The value of a after swapping: 2
The value of b after swapping: 4

This method only uses the two variables and swaps the value of the variables using arithmetic operators + and -.

Here, parseInt() is used because prompt() takes input from the user as a string. And when numeric strings are added, it behaves as a string. For example, '2' + '3' = '23'. So parseInt() converts a numeric string to number.

Let's see how the above program swaps values. Initially, a is 4 and b is 2.

    a = a + b assigns the value 4 + 2 to a (now 6).
    b = a - b assigns the value 6 - 2 to b (now 4).
    a = a - b assign the value 6 - 4 to a (now 2).

Finally, a is 2 and b is 4.

Note: You can use arithmetic operators (+, -) if both variables are of number type.

Example 4: Using Bitwise XOR operator

//JavaScript program to swap two variables

//take input from the users
let a = prompt('Enter the first variable: ');
let b = prompt('Enter the second variable: ');

// XOR operator
a = a ^ b
b = a ^ b
a = a ^ b

console.log(`The value of a after swapping: ${a}`);
console.log(`The value of b after swapping: ${b}`);

Run Code

Output

Enter the first variable: 4
Enter the second variable: 2
The value of a after swapping: 2
The value of b after swapping: 4

Let's see how the above program swaps values. Initially, a is 4 and b is 2.

    a = a ^ b assigns the value 4 ^ 2 to a (now 6).
    b = a ^ b assigns the value 6 ^ 2 to b (now 4).
    a = a ^ b assign the value 6 ^ 4 to a (now 2).

Finally, a is 2 and b is 4.

Note: You can use this method for only integer (whole number) values.

Javascript Program to Solve Quadratic Equation

This program computes roots of a quadratic equation when its coefficients are known.

The standard form of a quadratic equation is:

ax2 + bx + c = 0, where
a, b and c are real numbers and
a ≠ 0

To find the roots of such equation, we use the formula,

(root1,root2) = (-b ± √b2-4ac)/2

The term b2-4ac is known as the discriminant of a quadratic equation. It tells the nature of the roots.

    If the discriminant is greater than 0, the roots are real and different.
    If the discriminant is equal to 0, the roots are real and equal.
    If the discriminant is less than 0, the roots are complex and different.

Example: Roots of a Quadratic Equation

// program to solve quadratic equation
let root1, root2;

// take input from the user
let a = prompt("Enter the first number: ");
let b = prompt("Enter the second number: ");
let c = prompt("Enter the third number: ");

// calculate discriminant
let discriminant = b * b - 4 * a * c;

// condition for real and different roots
if (discriminant > 0) {
    root1 = (-b + Math.sqrt(discriminant)) / (2 * a);
    root2 = (-b - Math.sqrt(discriminant)) / (2 * a);

    // result
    console.log(`The roots of quadratic equation are ${root1} and ${root2}`);
}

// condition for real and equal roots
else if (discriminant == 0) {
    root1 = root2 = -b / (2 * a);

    // result
    console.log(`The roots of quadratic equation are ${root1} and ${root2}`);
}

// if roots are not real
else {
    let realPart = (-b / (2 * a)).toFixed(2);
    let imagPart = (Math.sqrt(-discriminant) / (2 * a)).toFixed(2);

    // result
    console.log(
    `The roots of quadratic equation are ${realPart} + ${imagPart}i and ${realPart} - ${imagPart}i`
  );
}

Output 1

Enter the first number: 1
Enter the second number: 6
Enter the third number: 5
The roots of quadratic equation are -1 and -5

The above input values satisfy the first if condition. Here, the discriminant will be greater than 0 and the corresponding code is executed.

Output 2

Enter the first number: 1
Enter the second number: -6
Enter the third number: 9
The roots of quadratic equation are 3 and 3

The above input values satisfy the else if condition. Here, the discriminant will be equal to 0 and the corresponding code is executed.

Output 3

Enter the first number: 1
Enter the second number: -3
Enter the third number: 10
The roots of quadratic equation are 1.50 + 2.78i and 1.50 - 2.78i

In the above output, the discriminant will be less than 0 and the corresponding code is executed.

In the above program, the Math.sqrt() method is used to find the square root of a number. You can see that toFixed(2) is also used in the program. This rounds up the decimal number to two decimal values.

JavaScript Program to Convert Kilometers to Miles



We know that 1 kilometer is equal to 0.621371 miles.

So to convert kilometers to miles, you can use the formula:

miles = kilometers * 0.621371

Example 1: Kilometers to Miles

// taking kilometers input from the user
const kilometers = prompt("Enter value in kilometers: ")

// conversion factor
const factor = 0.621371

// calculate miles
const miles = kilometers * factor

console.log(`${kilometers} kilometers is equal to ${miles} miles.`);

Output

Enter value in kilometers: 2.2
2.2 kilometers is equal to 1.3670162000000001 miles.

Here, the kilometers variable is used to store the kilometer value from the user. Then kilometer value is multiplied with factor to convert into miles.

To convert miles to kilometers, you can use formula:

kilometers = miles / factor

Javascript Program to Convert Celsius to Fahrenheit



You can convert the celsius value to fahrenheit by using the formula:

fahrenheit = celsius * 1.8 + 32

Example: Celsius to Fahrenheit

// program to convert celsius to fahrenheit
// ask the celsius value to the user 
const celsius = prompt("Enter a celsius value: ");

// calculate fahrenheit
const fahrenheit = (celsius * 1.8) + 32

// display the result
console.log(`${celsius} degree celsius is equal to ${fahrenheit} degree fahrenheit.`);

Run Code

Output

Enter a celsius value: 55
55 degree celsius is equal to 131 degree fahrenheit.

In the above program, the user enters the celsius value and is stored in the celsius variable. Then the fahrenheit formula is used to convert celsius value to fahrenheit.

You can convert fahrenheit value to celsius using the formula:

celsius = (fahrenheit - 32) / 1.8

Javascript Program to Generate a Random Number

In JavaScript, you can generate a random number with the Math.random() function.

Math.random() returns a random floating-point number ranging from 0 to less than 1 (inclusive of 0 and exclusive of 1)
Example 1: Generate a Random Number

// generating  a random number
const a = Math.random();
console.log(a);

Run Code

Output

0.5856407221615856

Here, we have declared a variable a and assigned it a random number greater than or equal to 0 and less than 1.

Note: You might get a different output in the above program as Math.random() will generate a random number.

We can use this value in the range (0,1) to find the random value between any two numbers using formula:

Math.random() * (highestNumber - lowestNumber) + lowestNumber

Example 2: Get a Random Number between 1 and 10

// generating a random number
const a = Math.random() * (10-1) + 1
console.log(`Random value between 1 and 10 is ${a}`);

Run Code

Output

Random value between 1 and 10 is 7.392579122270686

This will show a random floating-point number greater than 1 and less than 10.

All the above examples give floating-point random numbers.

You can use Math.floor() to get a random integer value. Math.floor() returns the number by decreasing the value to the nearest integer value. For example,

Math.floor(5.389); // 5
Math.floor(5.9); // 5

The syntax to find the random integer value between two numbers:

Math.floor(Math.random() * (highestNumber - lowestNumber)) + lowestNumber

Example 3: Integer Value between 1 and 10

// generating a random number
const a = Math.floor(Math.random() * (10 - 1)) + 1;
console.log(`Random value between 1 and 10 is ${a}`);

Run Code

Output

Random value between 1 and 10 is 2

This will show integer output between 1 (inclusive) to 10 (exclusive), i.e. (1 to 9). Here, Math.floor() is used to convert decimal to integer value.

Similarly, if you want to find the random integer in between min (inclusive) to max (inclusive), you can use the following formula:

Math.floor(Math.random() * (max - min + 1)) + min

Example 4: Integer Value between Two Numbers (Inclusive)

// input from the user
const min = parseInt(prompt("Enter a min value: "));
const max = parseInt(prompt("Enter a max value: "));

// generating a random number
const a = Math.floor(Math.random() * (max - min + 1)) + min;

// display a random number
console.log(`Random value between ${min} and ${max} is ${a}`);

Run Code

Output

Enter a min value: 1
Enter a max value: 50
Random value between 1 and 50 is 47

This will show the integer output between min (inclusive) to max (inclusive).

Javascript Program to Check if a number is Positive, Negative, or Zero



You will be using the if...else if...else statement to write the program.
Example 1: Check Number Type with if...else if...else

// program that checks if the number is positive, negative or zero
// input from the user
const number = parseInt(prompt("Enter a number: "));

// check if number is greater than 0
if (number > 0) {
    console.log("The number is positive");
}

// check if number is 0
else if (number == 0) {
  console.log("The number is zero");
}

// if number is less than 0
else {
     console.log("The number is negative");
}

Run Code

Output

Enter a number: 0
The number is zero.

The above program checks if the number entered by the user is positive, negative or zero.

    The condition number > 0 checks if the number is positive.
    The condition number == 0 checks if the number is zero.
    The condition number < 0 checks if the number is negative.

The above program can also be written using the nested if...else statement.
Example 2: Check Number Type with nested if...else

// check if the number is positive, negative or zero
const number = prompt("Enter a number: ");

if (number >= 0) {
    if (number == 0) {
        console.log("The number is zero");
    } else {
        console.log("The number is positive");
    }
} else {
    console.log("The number is negative");
}

Run Code

Output

Enter a number: 0
You entered number zero

The above program works the same as Example 1. However, the second example uses the nested if...else statement.









